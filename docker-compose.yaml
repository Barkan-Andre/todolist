version: '3.9'

services:

  postgres:
    image: postgres:13.0-alpine
    restart: always
    env_file:
      - src/.env

    volumes:
      - pg_data_todolist:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready - U postgres
      interval: 5s
      timeout: 3s
      retries: 3
    ports:
      - "5432:5432"

volumes:
  pg_data_todolist:

networks:
  backend_nw:
    driver: bridge

#version: '3.9'
#services:
#  front:
#    image: sermalenk/skypro-front:lesson-35
#    restart: always
#    ports:
#      - 80:80
#    depends_on:
#      - api
#    networks:
#      - backend
#
#  api:
#    build:
#      context: .
#    restart: always
#    image: vmonin/todolist_dp
#    env_file:
#      - .docker_env
#    environment:
#      SECRET_KEY: ${SECRET_KEY}
#      POSTGRES_DB: ${POSTGRES_DB}
#      POSTGRES_USER: ${POSTGRES_USER}
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#      POSTGRES_HOST: postgres
#    depends_on:
#      postgres:
#        condition: service_healthy
#      migrations:
#        condition: service_completed_successfully
#    volumes:
#      - ./.docker_env:/code/.docker_env
#    networks:
#      - backend
#
#
#  migrations:
#    build:
#      context: .
#    restart: always
#    image: vmonin/todolist_dp
#    env_file:
#      - .docker_env
#    environment:
#      SECRET_KEY: ${SECRET_KEY}
#      POSTGRES_DB: ${POSTGRES_DB}
#      POSTGRES_USER: ${POSTGRES_USER}
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#      POSTGRES_HOST: postgres
#    depends_on:
#      postgres:
#        condition: service_healthy
#    command: python manage.py migrate
#    volumes:
#      - ./.docker_env:/code/.docker_env
#    networks:
#      - backend
